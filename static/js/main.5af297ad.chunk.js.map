{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","city","className","country","temp","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","cod","setState","sys","date","Date","sunset_date","getHours","getMinutes","getSeconds","dateSunrise","hoursSunrise","minSunrice","secSunrise","sunrise_date","tempCel","Math","round","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0PAwBeA,EAPH,kBACR,gCACI,6CACA,qECEOC,EAPF,SAAAC,GAAK,OACd,uBAAMC,SAAUD,EAAME,cAAtB,UACI,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAC3C,yDCkBOC,EAdC,SAAAN,GAAK,OACjB,gCACCA,EAAMO,MACH,sBAAKC,UAAU,YAAf,UACI,2CAAcR,EAAMO,KAApB,KAA4BP,EAAMS,WAClC,uCAAUT,EAAMU,KAAhB,YACA,0CAAaV,EAAMW,WACnB,yCAAYX,EAAMY,aAG1B,mBAAGJ,UAAU,QAAb,SAAsBR,EAAMa,YC3B1BC,EAAS,mCAkGAC,E,4MA9FXC,MAAQ,CACJN,UAAMO,EACNV,UAAMU,EACNR,aAASQ,EACTN,aAASM,EACTL,YAAQK,EACRJ,WAAOI,G,EAGXC,e,uCAAiB,WAAMC,GAAN,uCAAAC,EAAA,yDACbD,EAAEE,mBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFvB,iCAMaC,MAAM,qDAAD,OAAsDlB,EAAtD,kBAAoEO,IANtF,cAMHY,EANG,gBAOUA,EAAQC,OAPlB,UASO,SAFVC,EAPG,QASDC,IATC,wBAUL,EAAKC,SAAS,CACVpB,UAAMO,EACNV,UAAMU,EACNR,aAASQ,EACTN,aAASM,EACTL,YAAQK,EACRJ,MAAO,+BAhBN,2BAqBLD,EAASgB,EAAKG,IAAInB,OAClBoB,EAAO,IAAIC,KAAY,IAAPrB,GAEhBsB,EAAcF,EAAKG,WAAa,IAAMH,EAAKI,aAAe,IAAMJ,EAAKK,aAErE1B,EAAUiB,EAAKG,IAAIpB,QACnB2B,EAAc,IAAIL,KAAa,IAARtB,GACvB4B,EAAeD,EAAYH,WAC3BK,EAAaF,EAAYF,aACzBK,EAAaH,EAAYD,aACzBK,EAAeH,EAAe,IAAMC,EAAa,IAAMC,EAEvDE,EAAUC,KAAKC,MAAMjB,EAAKkB,KAAKpC,MAAS,KAE5C,EAAKoB,SAAS,CACVpB,KAAMiC,EACNpC,KAAMqB,EAAKxB,KACXK,QAASmB,EAAKG,IAAItB,QAClBE,QAAS+B,EACT9B,OAAQsB,EACRrB,WAAOI,IAzCF,wBA4CT,EAAKa,SAAS,CACVpB,UAAMO,EACNV,UAAMU,EACNR,aAASQ,EACTN,aAASM,EACTL,YAAQK,EACRJ,MAAO,2BAlDF,4C,kGAwDjB,WACI,OACI,sBAAKL,UAAU,UAAf,UACI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,CAAMN,cAAiB6C,KAAK7B,iBAC5B,cAAC,EAAD,CACIR,KAAMqC,KAAK/B,MAAMN,KACjBH,KAAMwC,KAAK/B,MAAMT,KACjBE,QAASsC,KAAK/B,MAAMP,QACpBE,QAASoC,KAAK/B,MAAML,QACpBC,OAAQmC,KAAK/B,MAAMJ,OACnBC,MAAOkC,KAAK/B,MAAMH,kBAf1C,W,GArEMmC,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,c","file":"static/js/main.5af297ad.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/*full verssion*/\r\n// class Info extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h2>Weather App</h2>\r\n//                 <div>Check the Weather in you town.</div>\r\n//             </div>\r\n            \r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n/*short verssion*/\r\nconst Info =() =>(\r\n    <div>\r\n        <h2>Weather App</h2>\r\n        <div>Check the Weather in you town.</div>\r\n    </div>\r\n)\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\n/*full verssion */\r\n// class Form extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <form onSubmit={this.props.weatherMethod}>\r\n//                 <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n//                 <button>Get the weather</button>\r\n//             </form>\r\n//         );\r\n//     }\r\n// }\r\n\r\n/*short verssion */\r\nconst Form = props =>(\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Enter Your City\" />\r\n        <button>Get the weather</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n/* full verssion */\r\n// class Weather extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 {this.props.city &&\r\n//                     <div>\r\n//                         <p>Location: {this.props.city}, {this.props.country}</p>\r\n//                         <p>Temp: {this.props.temp}</p>\r\n//                         <p>Sunrise: {this.props.sunrise}</p>\r\n//                         <p>Sunset: {this.props.sunset}</p>\r\n//                     </div>\r\n//                 }\r\n//                 <p>{this.props.error}</p>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n/*short verssion */\r\nconst Weather = props =>(\r\n    <div >\r\n    {props.city &&\r\n        <div className=\"infoWeath\">\r\n            <p>Location: {props.city}, {props.country}</p>\r\n            <p>Temp: {props.temp} &#176;C</p>\r\n            <p>Sunrise: {props.sunrise}</p>\r\n            <p>Sunset: {props.sunset}</p>\r\n        </div>\r\n    }\r\n    <p className=\"error\">{props.error}</p>\r\n    </div>\r\n)\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY =\"8f2035578dcdb592bc2546c52ad02174\";\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    gettingWeather = async(e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        \r\n        \r\n        if(city){\r\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`);\r\n            const data = await api_url.json();\r\n            \r\n            if(data.cod === '404'){\r\n                this.setState({\r\n                    temp: undefined,\r\n                    city: undefined,\r\n                    country: undefined,\r\n                    sunrise: undefined,\r\n                    sunset: undefined,\r\n                    error: \"Please check city spelling\"\r\n                });\r\n                return;\r\n            }\r\n            // console.log(data);\r\n            let sunset = data.sys.sunset;\r\n            let date = new Date(sunset*1000);\r\n            // date.setTime(sunset);\r\n            let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds()\r\n\r\n            let sunrise = data.sys.sunrise;\r\n            let dateSunrise = new Date(sunrise*1000);\r\n            let hoursSunrise = dateSunrise.getHours();\r\n            let minSunrice = dateSunrise.getMinutes();\r\n            let secSunrise = dateSunrise.getSeconds();\r\n            let sunrise_date = hoursSunrise + \":\" + minSunrice + \":\" + secSunrise;\r\n\r\n            let tempCel = Math.round(data.main.temp + (-273));\r\n            \r\n            this.setState({\r\n                temp: tempCel,\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                sunrise: sunrise_date,\r\n                sunset: sunset_date,\r\n                error: undefined\r\n            });\r\n        }else{\r\n            this.setState({\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                sunrise: undefined,\r\n                sunset: undefined,\r\n                error: \"Please enter your city\"\r\n            });\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-5 info\">\r\n                                <Info/>\r\n                            </div>\r\n                            <div className=\"col-sm-7 form\">\r\n                                <Form weatherMethod = {this.gettingWeather}/>\r\n                                <Weather\r\n                                    temp={this.state.temp}\r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    sunrise={this.state.sunrise}\r\n                                    sunset={this.state.sunset}\r\n                                    error={this.state.error} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>.\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}